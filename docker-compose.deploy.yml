services:
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - "65432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  dagster-webserver:
    build:
      context: .
      dockerfile: Dockerfile.git
      args:
        GIT_REPO: ${GIT_REPO}
        GIT_REF: ${GIT_REF:-master}
    entrypoint: ["/bin/sh", "-lc"]
    command:
      [
        "pip install --no-cache-dir dagster dagster-webserver && exec python -m dagster dev -m dagster_pipeline -d /usr/src/app -h 0.0.0.0 -p 3000",
      ]
    working_dir: /usr/src/app
    ports:
      - "33000:3000"
    env_file:
      - .env.deploy
    environment:
      - DAGSTER_HOME=/usr/src/app/dagster_home
      - DB_HOST=postgres
      - DB_PORT=5432
      - PYTHONPATH=/usr/src/app
    volumes:
      - ./stock_pipeline:/usr/src/app/stock_pipeline:ro
      # If this repo has dagster_pipeline locally, uncomment the next line:
      # - ./dagster_pipeline:/usr/src/app/dagster_pipeline:ro
    depends_on:
      postgres:
        condition: service_healthy

  api:
    build:
      context: .
      dockerfile: Dockerfile.git
      args:
        GIT_REPO: ${GIT_REPO}
        GIT_REF: ${GIT_REF:-master}
    command:
      [
        "uvicorn",
        "stock_pipeline.api:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--workers",
        "2",
      ]
    working_dir: /usr/src/app
    ports:
      - "8000:8000"
    env_file:
      - .env.deploy
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - PYTHONPATH=/usr/src/app
    volumes:
      - ./stock_pipeline:/usr/src/app/stock_pipeline:ro
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data: